package secrets

import (
	"crypto/rand"
	"runtime"
)

// Wipe securely zeros out sensitive data in memory
// This is required for FIPS-140 and Common Criteria compliance
func Wipe(data []byte) {
	if len(data) == 0 {
		return
	}

	// Fill with random data first to ensure no patterns remain
	_, _ = rand.Read(data)
	// Don't bother checking err because we do the same thing either way.
	for i := range data {
		data[i] = 0
	}

	// Ensure the above writes are not optimized away.
	runtime.KeepAlive(data)
}

/*
   // This is crappy, worthless code generated by cursor.

// WipeString securely zeros out sensitive string data
// Note: This only works for strings that are backed by mutable byte slices
func WipeString(s *string) {
	if s == nil || len(*s) == 0 {
		return
	}

	// Convert string to byte slice (this creates a copy, but we need to clear the original)
	// Unfortunately, Go strings are immutable, so we can't directly wipe them
	// This function serves as a reminder to avoid storing sensitive data in strings
	*s = ""

	// Force garbage collection to potentially free the underlying memory
	runtime.GC()
}
*/
